---
import { Image } from "astro:assets";
import type { WorkItem } from "./WorkItem";
import "@styles/card.scss";
import type { CollectionEntry } from "astro:content";
import defaultIcon from "@data/applist/icons/noimage.png";
import IconButton from "./IconButton.astro";

interface Props {
  props: CollectionEntry<"applist">;
  detailLink: boolean;
}
const { props, detailLink } = Astro.props;

const bottomLinks = props.data.links; //.filter((v) => v.label != undefined);
---

<div class="card">
  <div class="card-content">
    {
      props.data.icon && props.data.iconPixelated ? (
        <img
          class="card-work-icon"
          src={props.data.icon?.src}
          width="120"
          height="120"
          alt={props.data.title + "のアイコン"}
          style="image-rendering: pixelated;"
        />
      ) : (
        <Image
          class="card-work-icon"
          src={props.data.icon || defaultIcon}
          width="120"
          height="120"
          densities={[1, 2, 3]}
          alt={props.data.title + "のアイコン"}
        />
      )
    }

    <div>
      <h3 class="card-title">
        {props.data.title}
      </h3>
      <div class="card-tag-list">
        {props.data.category.map((item) => <span class="tag">{item}</span>)}
      </div>
      <p class="card-description">
        {props.data.short}
      </p>
      <div class="card-link-list" style="justify-content: flex-end;">
        <a class="detail-link" href={"/works/" + props.id + ".html"}>
          詳しく<i class="ri-arrow-right-double-fill"></i>
        </a>
        <div class="link-list-spacer"></div>
        {
          !detailLink &&
            bottomLinks.length > 0 &&
            bottomLinks.map((li) => (
              <IconButton
                href={li.url}
                icon={li.icon}
                image={li.image}
                image_dark={li.imageDark}
                text={li.text || ""}
              />
            ))
        }
      </div>
    </div>
  </div>
</div>
