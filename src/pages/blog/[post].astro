---
import type { MarkdownInstance } from "astro";
import BaseLayout from "@layouts/BaseLayout.astro";
import DisqusArea from "@components/DisqusArea.astro";
import ArticleArea from "@components/ArticleArea.astro";
import path from "path";

import { Temporal } from "@js-temporal/polyfill";

export async function getStaticPaths() {
  const data = await Astro.glob("../../data/blog/*.md");

  return data.map((post) => {
    return {
      params: { post: path.basename(post.file).replace(".md", "") },
      props: post,
    };
  });
}

async function findFirstAndLatestTimeStamp(fileName: string) {
  let res;
  try {
    res = await fetch(
      "https://api.github.com/repos/nona-takahara/" +
        "nona-takahara.github.io/commits" +
        `?path=${encodeURIComponent(fileName)}`
    );
  } catch {
    return {};
  }

  let first = null,
    latest = null;

  if (res.ok) {
    const commitData = await res.json();
    for (const k of commitData) {
      let d = k?.commit?.committer?.date;
      if (d) {
        let tp = Temporal.Instant.from(d);
        if (first === null || Temporal.Instant.compare(tp, first) === -1) {
          first = tp;
        }
        if (latest === null || Temporal.Instant.compare(tp, latest) === 1) {
          latest = tp;
        }
      }
    }
  }

  return { first_commit: first, latest_commit: latest };
}

const content = Astro.props as MarkdownInstance<Record<string, any>>;
const filepath = `src/data/blog/${path
  .basename(content.file)
  .replace(".html", ".md")}`;
const date = await findFirstAndLatestTimeStamp(filepath);
const useDisqus = !filepath.includes("stock");
---

<BaseLayout
  katex={content.frontmatter.katex}
  titleShort={content.frontmatter.title}
  titleSuffix=" | こーげんやさいブログ"
  description={content.frontmatter.short}
>
  <main class="container blog">
    <ArticleArea
      title={content.frontmatter.title}
      postDate={date.first_commit}
      updateDate={date.latest_commit}
      set:html={content.compiledContent()}
    />
  </main>
  <nav>
    <div class="container">
      <p><a href="/blog/">[ブログトップへ]</a></p>
    </div>
  </nav>
  {
    useDisqus && (
      <section>
        <div class="container">
          <hr />
          <DisqusArea
            baseName={path.basename(content.file).replace(".md", ".html")}
            originalTitle={
              content.frontmatter.orignalTitle || content.frontmatter.title
            }
          />
        </div>
      </section>
    )
  }
</BaseLayout>
