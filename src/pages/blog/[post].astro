---
import gitlog from "gitlog";
import type { AstroInstance, MarkdownInstance } from "astro";
import BaseLayout from "@layouts/BaseLayout.astro";
import DisqusArea from "@components/DisqusArea.astro";
import ArticleArea from "@components/ArticleArea.astro";
//@ts-ignore
import path from "node:path";
import { Temporal } from "@js-temporal/polyfill";
import ignoreHashes from "@data/ignore-hashes";

export async function getStaticPaths() {
  const data: AstroInstance[] = await Astro.glob("../../content/blog/*.md");

  return data.map((post) => {
    return {
      params: { post: path.basename(post.file).replace(".md", "") },
      props: post,
    };
  });
}

async function findFirstAndLatestTimeStamp(fileName: string) {
  const res = await gitlog({
    repo: "./",
    follow: true,
    file: fileName,
    all: true,
  });

  let first: Temporal.Instant | undefined = undefined,
    latest: Temporal.Instant | undefined = undefined;

  if (res) {
    res.forEach((k) => {
      if (!ignoreHashes.includes(k.hash)) {
        let tp = Temporal.Instant.from(gitlogLibDateToISODate(k.authorDate));
        if (first == undefined || Temporal.Instant.compare(tp, first) === -1) {
          first = tp;
        }
        if (latest == undefined || Temporal.Instant.compare(tp, latest) === 1) {
          latest = tp;
        }
      }
    });
  }

  return { first_commit: first, latest_commit: latest };
}

function gitlogLibDateToISODate(gitlibdate: string) {
  return (
    gitlibdate.slice(0, 10) +
    "T" +
    gitlibdate.slice(11, 19) +
    gitlibdate.slice(20, 23) +
    ":" +
    gitlibdate.slice(23, 25)
  );
}

const content = Astro.props as MarkdownInstance<Record<string, any>>;
const filepath = `src/content/blog/${path
  .basename(content.file)
  .replace(".mdx", ".md")
  .replace(".html", ".md")}`;
const date = await findFirstAndLatestTimeStamp(filepath);
const useDisqus = !filepath.includes("stock");
---

<BaseLayout
  katex={content.frontmatter.katex}
  highlight={content.frontmatter.highlight}
  titleShort={content.frontmatter.title}
  titleSuffix=" | こーげんやさいブログ"
  description={content.frontmatter.short}
  pageType="article"
>
  <main class="container blog">
    <ArticleArea
      title={content.frontmatter.title}
      postDate={date.first_commit}
      updateDate={date.latest_commit}
      set:html={content.compiledContent()}
    />
  </main>
  <nav>
    <div class="container">
      <p>
        <a href="/blog/">[ブログトップへ]</a>
        <a href="/">[こーげんやさいトップへ]</a>
      </p>
    </div>
  </nav>
  {
    useDisqus && (
      <section>
        <div class="container">
          <hr />
          <DisqusArea
            baseName={path.basename(content.file).replace(".md", ".html")}
            originalTitle={
              content.frontmatter.orignalTitle || content.frontmatter.title
            }
          />
        </div>
      </section>
    )
  }
</BaseLayout>
